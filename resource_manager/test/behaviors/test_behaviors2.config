"""Provide configuration classes for testing purposes."""

from resource_manager.role_base import Behavior, Role, ResourceManagerError   # pylint: disable=import-error

def build_behavior(beh_name, beh_priority, roles):
    """Build a test behavior based on the name, priority and roles passed in."""
    behavior = TestBehavior(beh_name, beh_priority, roles)
    return behavior

class TestBehavior(Behavior):
    """Test Behavior child class."""
    @staticmethod
    def is_instance(behavior_id):
        """Check that the behaivor_id is an instance of this behavior type."""
        return behavior_id.split("/")[-1] in ["behavior_1", "behavior_2"]

    def build_role(self, role):
        """Build the proper role from the role message"""
        role_classes = [TestRole1, TestRole2]
        for role_class in role_classes:
            try:
                built_role = role_class(self,
                                        role.name,
                                        role.priority,
                                        role.required,
                                        role.resources)
                break
            except TypeError:
                pass
        else:
            raise ResourceManagerError("The requested role type does not match "
                                       + "any of {}'s roles"
                                       .format(self.behavior_id))
        return built_role


    def score(self, role, agent, batch, path):  # pylint: disable=unused-argument, no-self-use
        """Return a behavior level score."""
        return 20


class TestRole1(Role):
    """Test Role child class."""
    def score(self, agent, batch, path):
        """Return a combined score."""
        return self.behavior.score(self, agent, batch, path) - len(path), \
                len(path)

    @staticmethod
    def is_instance(role_name):
        """Check that the role_name is consistent with the represented role."""
        return role_name == "role_1"

class TestRole2(Role):
    """Test Role child class."""
    def score(self, agent, batch, path):
        """Return a combined score."""
        return self.behavior.score(self, agent, batch, path) - 2*len(path), \
                len(path)

    @staticmethod
    def is_instance(role_name):
        """Check that the role_name is consistent with the represented role."""
        return role_name == "role_2"
